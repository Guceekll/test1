'use client';

import { useParams, useSearchParams } from 'next/navigation';
import { useState, useEffect, useRef } from 'react';
import Sidebar from '@/components/Sidebar';
import ChatWindow from '@/components/ChatWindow';
import InputPanel from '@/components/InputPanel';

interface Message {
  type: 'question' | 'answer' | 'loading';
  text: string;
  summary?: boolean;
}

export default function InterviewPage() {
  const { sessionId } = useParams();
  const searchParams = useSearchParams();
  const qParam = searchParams.get('q');

  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [finished, setFinished] = useState(false);
  const [summary, setSummary] = useState('');
  const [saving, setSaving] = useState(false);
  const sentOnceRef = useRef(false);

  useEffect(() => {
    if (qParam && !sentOnceRef.current) {
      sentOnceRef.current = true;
      setInput(qParam);
      handleSend(qParam);
    }
  }, [qParam]);

  const handleSend = async (question?: string) => {
    const text = question ?? input;
    if (!text.trim()) return;

    setMessages((prev) => [...prev, { type: 'question', text }]);
    setInput('');
    setMessages((prev) => [...prev, { type: 'loading', text: '...' }]);

    try {
      const res = await fetch(`http://localhost:8000/chat/${sessionId}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ message: text })
      });

      const data = await res.json();

      setMessages((prev) => {
        const newMessages = [...prev];
        const idx = newMessages.findIndex((msg) => msg.type === 'loading');
        if (idx !== -1) {
          newMessages[idx] = { type: 'answer', text: data.reply };
        } else {
          newMessages.push({ type: 'answer', text: data.reply });
        }
        return newMessages;
      });
    } catch (error) {
      setMessages((prev) => {
        const newMessages = [...prev];
        const idx = newMessages.findIndex((msg) => msg.type === 'loading');
        if (idx !== -1) {
          newMessages[idx] = { type: 'answer', text: '⚠️ 出错了，无法连接到服务器。' };
        } else {
          newMessages.push({ type: 'answer', text: '⚠️ 出错了，无法连接到服务器。' });
        }
        return newMessages;
      });
    }
  };

  const handleFinish = async () => {
    if (saving || finished) return;
    setSaving(true);

    // 插入“总结生成中”loading气泡
    setMessages((prev) => [...prev, { type: 'loading', text: '📄 总结生成中，请稍候...' }]);

    try {
      const res = await fetch(`http://localhost:8000/end_session/${sessionId}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          user_id: 'user001',
          style: '共情式'
        })
      });

      const data = await res.json();
      setSummary(data.summary);

      setMessages((prev) => {
        const newMessages = [...prev];
        const idx = newMessages.findIndex((msg) => msg.type === 'loading' && msg.text.includes('总结生成中'));
        if (idx !== -1) {
          newMessages[idx] = {
            type: 'answer',
            text: `✅ 采访已结束。以下是总结：\n\n${data.summary}`,
            summary: true
          };
        } else {
          newMessages.push({
            type: 'answer',
            text: `✅ 采访已结束。以下是总结：\n\n${data.summary}`,
            summary: true
          });
        }
        return newMessages;
      });

      setFinished(true);
    } catch (error) {
      setMessages((prev) => [
        ...prev,
        { type: 'answer', text: '⚠️ 保存失败，请稍后重试。' }
      ]);
    } finally {
      setSaving(false);
    }
  };

  return (
    <div className="flex h-screen">
      <Sidebar
        onNewChat={() => window.location.href = '/'}
        onSelectCategory={(cat) => console.log('Category selected:', cat)}
        onSelectRecentChat={(title) => console.log('Chat selected:', title)}
      />
      <div className="flex flex-col flex-1 bg-white">
        <ChatWindow messages={messages} />
        <InputPanel
          value={input}
          onChange={setInput}
          onSend={() => handleSend()}
          onUpload={() => console.log('Upload image')}
          onFinish={handleFinish}
          showFinish={true}
          isFinishing={saving} // ✅ 传递 saving 状态
        />
      </div>
    </div>
  );
}
