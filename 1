'use client';

import { useEffect, useRef } from 'react';

interface Message {
  type: 'question' | 'answer' | 'loading';
  text: string;
  summary?: boolean;
  fileName?: string;
  fileType?: string;
}

interface ChatWindowProps {
  messages: Message[];
}

export default function ChatWindow({ messages }: ChatWindowProps) {
  const bottomRef = useRef<HTMLDivElement | null>(null);

  useEffect(() => {
    bottomRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  return (
    <div className="flex-1 overflow-y-auto px-4 py-6 space-y-4 bg-white">
      {messages.map((msg, idx) => {
        const isUser = msg.type === 'question';

        return (
          <div key={idx} className={`flex ${isUser ? 'justify-end' : 'justify-start'}`}>
            <div
              className={`max-w-[70%] px-4 py-2 rounded-2xl text-sm whitespace-pre-wrap
                ${msg.type === 'question' ? 'bg-blue-500 text-white' : ''}
                ${msg.type === 'answer' && msg.summary ? 'bg-green-100 text-green-800 border border-green-400' : ''}
                ${msg.type === 'answer' && !msg.summary ? 'bg-gray-200 text-gray-800' : ''}
                ${msg.type === 'loading' ? 'bg-gray-100 text-gray-500 animate-pulse' : ''}
              `}
            >
              {/* ✅ 渲染文件卡片 */}
              {msg.fileName ? (
                <div className="flex items-center gap-3 bg-pink-100 rounded-xl px-3 py-2 w-fit shadow-sm border border-pink-200">
                  <div className="flex flex-col text-sm max-w-[180px]">
                    <span className="font-medium text-gray-800 truncate">{msg.fileName}</span>
                    <span className="text-xs text-gray-500">{msg.fileType?.toUpperCase() || 'FILE'}</span>
                  </div>
                </div>
              ) : (
                msg.text
              )}
            </div>
          </div>
        );
      })}
      <div ref={bottomRef} />
    </div>
  );
}
