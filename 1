import streamlit as st
import pyotp
import time
import math

# Absolute file path
CSS_PATH = "style.css"

def local_css(file_name):
    """Inject custom CSS"""
    with open(file_name, "r") as f:
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

def create_user_icon_html():
    """Create HTML for user icon"""
    html = """
    <div class="user-icon-container">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="user-icon">
            <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"></path>
            <circle cx="12" cy="7" r="4"></circle>
        </svg>
    </div>
    """
    return html

def create_circular_progress_html(label, current_token, next_token, countdown):
    """Create HTML for circular progress bar"""
    # Calculate degrees for progress bar
    degrees = (countdown / 30) * 360

    html = f"""
    <div class="stContainer">
        <div class="token-header">
            <div class="token-label">{label}</div>
        </div>
        <div class="token-value">{current_token}</div>
        <div class="circular-progress">
            <div class="circular-progress-bar" style="background: conic-gradient(#4CAF50 {degrees}deg, #e0e0e0 {degrees}deg)"></div>
            <div class="circular-progress-text">{countdown}</div>
        </div>
        <div class="token-next">Next: {next_token}</div>
    </div>
    """
    return html

class AuthenticatorApp:
    def __init__(self):
        # Initialize session state for storing OTP tokens
        if 'tokens' not in st.session_state:
            st.session_state.tokens = {
                'TEL': self.generate_token(),
                'TKL': self.generate_token(),
                'TML': self.generate_token()
            }
        
        # Initialize countdown timers
        if 'countdown_timers' not in st.session_state:
            st.session_state.countdown_timers = {
                label: 30 for label in st.session_state.tokens
            }
        
    def generate_token(self):
        """Generate a new TOTP token"""
        totp = pyotp.TOTP(pyotp.random_base32())
        current_time = int(time.time())
        return {
            'secret': totp.secret,
            'current': totp.now(),
            'next': totp.at(current_time + 30),
            'timestamp': current_time
        }
    
    def render_token_card(self, label, token_data):
        """Render a single token card with circular progress"""
        countdown = st.session_state.countdown_timers[label]
        
        # Create HTML for token card
        card_html = create_circular_progress_html(
            label, 
            token_data['current'], 
            token_data['next'], 
            countdown
        )
        
        # Render HTML
        st.markdown(card_html, unsafe_allow_html=True)
    
    def update_countdown(self):
        """Update countdown timers"""
        for label in st.session_state.countdown_timers:
            if st.session_state.countdown_timers[label] > 0:
                st.session_state.countdown_timers[label] -= 1
            else:
                # Regenerate token when countdown reaches 0
                st.session_state.tokens[label] = self.generate_token()
                st.session_state.countdown_timers[label] = 30
    
    def run(self):
        """Main Streamlit app"""
        st.set_page_config(page_title="Two-Factor Authenticator", page_icon="üîê", layout="wide")
        
        # Custom CSS for card-like appearance
        local_css(CSS_PATH)
        
        # Render user icon
        st.markdown(create_user_icon_html(), unsafe_allow_html=True)
        
        st.title("üîê Two-Factor Authenticator")
        
        # Render tokens in a grid
        col1, col2, col3 = st.columns(3)
        
        with col1:
            self.render_token_card('TEL', st.session_state.tokens['TEL'])
        
        with col2:
            self.render_token_card('TKL', st.session_state.tokens['TKL'])
        
        with col3:
            self.render_token_card('TML', st.session_state.tokens['TML'])
        
        # Search functionality (placeholder)
        st.sidebar.header("Search Tokens")
        search_term = st.sidebar.text_input("Enter token label")
        
        # Add a timer to update countdown
        time.sleep(1)
        self.update_countdown()
        st.rerun()

def main():
    app = AuthenticatorApp()
    app.run()

if __name__ == "__main__":
    main()
